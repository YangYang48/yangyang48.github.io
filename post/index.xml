<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 欢迎来到我的博客~</title>
    <link>https://yangyang48.github.io/post/</link>
    <description>Recent content in Posts on 欢迎来到我的博客~</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://yangyang48.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>设计模式</title>
      <link>https://yangyang48.github.io/2021/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 28 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;设计模式代表了最佳的实践，是软件开发人员在软件开发过程中面临的一般问题的解决方案。笔者初衷用于对整体架构设计理解并记录，毕竟最好的学习就是输出。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode hot100</title>
      <link>https://yangyang48.github.io/2021/07/leetcode-hot100/</link>
      <pubDate>Wed, 28 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/07/leetcode-hot100/</guid>
      <description>&lt;p&gt;LeetCode是目前主流的算法刷题题库，尤其在实际开发过程中，可以做一些算法数据结构上的优化。笔者初衷用于边刷题边记录，毕竟最好的学习就是输出。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>写给自己的2023总结</title>
      <link>https://yangyang48.github.io/2024/01/%E5%86%99%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9A%842023%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2024/01/%E5%86%99%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9A%842023%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;p&gt;给自己的2023总结。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>功耗分析和优化实践</title>
      <link>https://yangyang48.github.io/2024/01/%E5%8A%9F%E8%80%97%E5%88%86%E6%9E%90%E5%92%8C%E4%BC%98%E5%8C%96%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2024/01/%E5%8A%9F%E8%80%97%E5%88%86%E6%9E%90%E5%92%8C%E4%BC%98%E5%8C%96%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;p&gt;功耗优化是应用体验优化的一个重要课题，高功耗会引发用户的电量焦虑，也会导致糟糕的发热体验，从而降低了用户的使用意愿。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>isp算法学习-NR（Noise Reduce）</title>
      <link>https://yangyang48.github.io/2023/12/isp%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-nrnoise-reduce/</link>
      <pubDate>Sat, 30 Dec 2023 13:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/12/isp%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-nrnoise-reduce/</guid>
      <description>&lt;p&gt;本文是isp算法学习的第九篇章，主要是讲述NR原理和算法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>isp算法学习-HVS（Human Vision System）</title>
      <link>https://yangyang48.github.io/2023/12/isp%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-hvshuman-vision-system/</link>
      <pubDate>Sat, 30 Dec 2023 12:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/12/isp%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-hvshuman-vision-system/</guid>
      <description>&lt;p&gt;本文是isp算法学习的第八篇章，主要是讲述HVS原理和算法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>isp算法学习-GAMMA CORRECTION</title>
      <link>https://yangyang48.github.io/2023/12/isp%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-gamma-correction/</link>
      <pubDate>Sat, 30 Dec 2023 11:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/12/isp%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-gamma-correction/</guid>
      <description>&lt;p&gt;本文是isp算法学习的第七篇章，主要是讲述GAMMA CORRECTION原理和算法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>isp算法学习-AWB</title>
      <link>https://yangyang48.github.io/2023/12/isp%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-awb/</link>
      <pubDate>Sat, 30 Dec 2023 10:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/12/isp%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-awb/</guid>
      <description>&lt;p&gt;本文是isp算法学习的第六篇章，主要是讲述AWB原理和算法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>isp算法学习-DPC</title>
      <link>https://yangyang48.github.io/2023/12/isp%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-dpc/</link>
      <pubDate>Fri, 29 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/12/isp%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-dpc/</guid>
      <description>&lt;p&gt;本文是isp算法学习的第五篇章，主要是讲述DPC原理和算法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>isp算法学习-插值</title>
      <link>https://yangyang48.github.io/2023/12/isp%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E6%8F%92%E5%80%BC/</link>
      <pubDate>Thu, 28 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/12/isp%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E6%8F%92%E5%80%BC/</guid>
      <description>&lt;p&gt;本文是isp算法学习的第四篇章，主要是讲述插值原理和算法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>isp算法学习-LSC</title>
      <link>https://yangyang48.github.io/2023/12/isp%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-lsc/</link>
      <pubDate>Wed, 27 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/12/isp%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-lsc/</guid>
      <description>&lt;p&gt;本文是isp算法学习的第三篇章，主要是讲述LSC原理和算法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>isp算法学习-BLC</title>
      <link>https://yangyang48.github.io/2023/12/isp%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-blc/</link>
      <pubDate>Tue, 26 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/12/isp%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-blc/</guid>
      <description>&lt;p&gt;本文是isp算法学习的第二篇章，主要是讲述BLC原理和算法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>isp算法学习-ISPPipeline</title>
      <link>https://yangyang48.github.io/2023/12/isp%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-isppipeline/</link>
      <pubDate>Mon, 25 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/12/isp%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-isppipeline/</guid>
      <description>&lt;p&gt;本文是isp算法学习的第一篇章，主要是讲述ISPPipeline整个流程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>camera hal之CameraProvider启动流程</title>
      <link>https://yangyang48.github.io/2023/12/camera-hal%E4%B9%8Bcameraprovider%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Sun, 24 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/12/camera-hal%E4%B9%8Bcameraprovider%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</guid>
      <description>&lt;p&gt;本文主要记录一些关于camera相关的camera hal之CameraProvider启动流程，包含从rc文件启动camera provider服务到最后打开供应商的so来完成初始化。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>camera 水波纹</title>
      <link>https://yangyang48.github.io/2023/12/camera-%E6%B0%B4%E6%B3%A2%E7%BA%B9/</link>
      <pubDate>Sun, 24 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/12/camera-%E6%B0%B4%E6%B3%A2%E7%BA%B9/</guid>
      <description>&lt;p&gt;本文主要记录关于camera水波纹或者说是flicker相关的概念和产生的原因，并说明如何去除flicker。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>camera Bayer矩阵</title>
      <link>https://yangyang48.github.io/2023/12/camera-bayer%E7%9F%A9%E9%98%B5/</link>
      <pubDate>Sun, 10 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/12/camera-bayer%E7%9F%A9%E9%98%B5/</guid>
      <description>&lt;p&gt;本文主要记录一些关于camera相关的概念和资料，主要是整体的一些概念，细节方面后续会单独有篇章去介绍。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>声学相关</title>
      <link>https://yangyang48.github.io/2023/11/%E5%A3%B0%E5%AD%A6%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Sun, 26 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/11/%E5%A3%B0%E5%AD%A6%E7%9B%B8%E5%85%B3/</guid>
      <description>&lt;p&gt;本文主要记录一些关于声学相关的概念和资料，主要是整体的一些概念，细节方面后续会单独有篇章去介绍。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AES加密和解密流程</title>
      <link>https://yangyang48.github.io/2023/10/aes%E5%8A%A0%E5%AF%86%E5%92%8C%E8%A7%A3%E5%AF%86%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Tue, 03 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/10/aes%E5%8A%A0%E5%AF%86%E5%92%8C%E8%A7%A3%E5%AF%86%E6%B5%81%E7%A8%8B/</guid>
      <description>&lt;p&gt;AES (Advanced Encryption Standard)是一种区块加密标准算法，它的提出是为了升级替换原有的DES加密算法。因此它的安全强度高于DES算法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>select、poll、epoll这三种多路复用的技术原理</title>
      <link>https://yangyang48.github.io/2023/08/selectpollepoll%E8%BF%99%E4%B8%89%E7%A7%8D%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E7%9A%84%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sun, 06 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/08/selectpollepoll%E8%BF%99%E4%B8%89%E7%A7%8D%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E7%9A%84%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;p&gt;之前介绍了关于epoll机制，实际上除了epoll以外，还存在两个io多路复用的系统调用函数select和poll&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; operator重载</title>
      <link>https://yangyang48.github.io/2023/07/c-operator%E9%87%8D%E8%BD%BD/</link>
      <pubDate>Sun, 23 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/07/c-operator%E9%87%8D%E8%BD%BD/</guid>
      <description>&lt;p&gt;源码中出现很多关于operator重载的操作符，但是本文着重讲述关于小括号，指针操作，自定义类型和类型转换。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; nodiscard</title>
      <link>https://yangyang48.github.io/2023/07/c-nodiscard/</link>
      <pubDate>Sat, 22 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/07/c-nodiscard/</guid>
      <description>&lt;p&gt;学习一下关于C++基础知识nodiscard。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; using使用</title>
      <link>https://yangyang48.github.io/2023/07/c-using%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 22 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/07/c-using%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;源码中出现很多关于私有继承的操作（默认不加public），但是通过using外部可以直接调用，这个是什么原理？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;大括号</title>
      <link>https://yangyang48.github.io/2023/07/c-%E5%A4%A7%E6%8B%AC%E5%8F%B7/</link>
      <pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/07/c-%E5%A4%A7%E6%8B%AC%E5%8F%B7/</guid>
      <description>&lt;p&gt;学习一下关于C++基础知识大括号。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; std::bind</title>
      <link>https://yangyang48.github.io/2023/07/c-stdbind/</link>
      <pubDate>Tue, 18 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/07/c-stdbind/</guid>
      <description>&lt;p&gt;学习一下关于C++基础知识std::bind&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于socketpair学习篇（包含源码对照解析）</title>
      <link>https://yangyang48.github.io/2023/07/%E5%85%B3%E4%BA%8Esocketpair%E5%AD%A6%E4%B9%A0%E7%AF%87%E5%8C%85%E5%90%AB%E6%BA%90%E7%A0%81%E5%AF%B9%E7%85%A7%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Mon, 10 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/07/%E5%85%B3%E4%BA%8Esocketpair%E5%AD%A6%E4%B9%A0%E7%AF%87%E5%8C%85%E5%90%AB%E6%BA%90%E7%A0%81%E5%AF%B9%E7%85%A7%E8%A7%A3%E6%9E%90/</guid>
      <description>&lt;p&gt;之前介绍了关于socket的用法，这里在此基础上再来看看跟socket类似的socketpair。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于可变函数va_list原理及用法</title>
      <link>https://yangyang48.github.io/2023/07/%E5%85%B3%E4%BA%8E%E5%8F%AF%E5%8F%98%E5%87%BD%E6%95%B0va_list%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95/</link>
      <pubDate>Sun, 02 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/07/%E5%85%B3%E4%BA%8E%E5%8F%AF%E5%8F%98%E5%87%BD%E6%95%B0va_list%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95/</guid>
      <description>&lt;p&gt;C语言允许定义参数数量可变的函数，这种函数需要固定数量的强制参数，后面是数量可变的可选参数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C语言隐式类型转换规则【记一次故障排除】</title>
      <link>https://yangyang48.github.io/2023/07/c%E8%AF%AD%E8%A8%80%E9%9A%90%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E8%A7%84%E5%88%99%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4/</link>
      <pubDate>Sat, 01 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/07/c%E8%AF%AD%E8%A8%80%E9%9A%90%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E8%A7%84%E5%88%99%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4/</guid>
      <description>&lt;p&gt;隐式类型转换造成的危害程度与数组和指针有的一拼。如果你混合使用不同类型，C使用一个规则集合来自动完成类型转换。这可能很方便，但也很危险。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android rc文件和解析</title>
      <link>https://yangyang48.github.io/2023/06/android-rc%E6%96%87%E4%BB%B6%E5%92%8C%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Sat, 24 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/06/android-rc%E6%96%87%E4%BB%B6%E5%92%8C%E8%A7%A3%E6%9E%90/</guid>
      <description>&lt;p&gt;Android进程对应的文件有后缀为rc文件的，那么rc文件是什么又是怎么加载启动的呢&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Native Looper使用和原理</title>
      <link>https://yangyang48.github.io/2023/06/native-looper%E4%BD%BF%E7%94%A8%E5%92%8C%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sat, 24 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/06/native-looper%E4%BD%BF%E7%94%A8%E5%92%8C%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;p&gt;Android中大量的用到了消息机制，而最终消息机制都离不开native Looper。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WMS-Window</title>
      <link>https://yangyang48.github.io/2023/04/wms-window/</link>
      <pubDate>Sun, 02 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/04/wms-window/</guid>
      <description>&lt;p&gt;Android framework层离不开AMS、WMS、PMS等，其中WMS中Window这个概念比较抽象，且很多博客作者写了很多关于Window的文章，我个人感觉还缺点什么，本文尽可能通过通俗易懂的方式来描述（android11和13源码）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>service call源码分析(以蓝牙打开关闭为例)</title>
      <link>https://yangyang48.github.io/2023/03/service-call%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%BB%A5%E8%93%9D%E7%89%99%E6%89%93%E5%BC%80%E5%85%B3%E9%97%AD%E4%B8%BA%E4%BE%8B/</link>
      <pubDate>Tue, 14 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/03/service-call%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%BB%A5%E8%93%9D%E7%89%99%E6%89%93%E5%BC%80%E5%85%B3%E9%97%AD%E4%B8%BA%E4%BE%8B/</guid>
      <description>&lt;p&gt;Android中如果需要通过adb指令调用系统服务中的方法，可以通过service call的形式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Battery Historian简单搭建</title>
      <link>https://yangyang48.github.io/2023/02/battery-historian%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Tue, 21 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/02/battery-historian%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA/</guid>
      <description>&lt;p&gt;Battery Historain是谷歌开发的Android耗电量分析工具，其开发语言为go语言。使用这个工具可以将bugreport内容通过可视化界面更加直观的展示出来。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iptables使用</title>
      <link>https://yangyang48.github.io/2023/02/iptables%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 19 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/02/iptables%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;Android应用网络限制功能实现，或者是网络白名单，限制儿童模式等等，通常会用到linux的iptables的操作。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android TextToSpeech浅析</title>
      <link>https://yangyang48.github.io/2023/02/android-texttospeech%E6%B5%85%E6%9E%90/</link>
      <pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/02/android-texttospeech%E6%B5%85%E6%9E%90/</guid>
      <description>&lt;p&gt;今天就顺便来拆解一下用到的核心，TextToSpeech功能(即tts)。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>不务正业系列 2博客中图形绘制的快速使用</title>
      <link>https://yangyang48.github.io/2023/02/%E4%B8%8D%E5%8A%A1%E6%AD%A3%E4%B8%9A%E7%B3%BB%E5%88%97-2%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 12 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/02/%E4%B8%8D%E5%8A%A1%E6%AD%A3%E4%B8%9A%E7%B3%BB%E5%88%97-2%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6%E7%9A%84%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;目前看到好多博客都流行使用不规则的icon作为插图，具体是drawio的使用，起来看难度不高，安排！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>c&#43;&#43; typeof</title>
      <link>https://yangyang48.github.io/2023/02/c-typeof/</link>
      <pubDate>Sat, 11 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/02/c-typeof/</guid>
      <description>&lt;p&gt;本文以最通俗易懂的方式熟悉c++ typeof。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux的TCP/IP协议栈发送过程</title>
      <link>https://yangyang48.github.io/2023/02/linux%E7%9A%84tcp/ip%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%8F%91%E9%80%81%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/02/linux%E7%9A%84tcp/ip%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%8F%91%E9%80%81%E8%BF%87%E7%A8%8B/</guid>
      <description>&lt;p&gt;本文以最通俗易懂的方式结合源码分析Linux的TCP/IP协议栈发送过程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一文带你了解SElinux那点事</title>
      <link>https://yangyang48.github.io/2023/01/%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3selinux%E9%82%A3%E7%82%B9%E4%BA%8B/</link>
      <pubDate>Sat, 07 Jan 2023 05:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/01/%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3selinux%E9%82%A3%E7%82%B9%E4%BA%8B/</guid>
      <description>&lt;p&gt;SELinux(Security Enhanced Linux)是一个Linux内核模块，也是一个安全子系统。用于最大限度地减小系统中服务进程可访问的资源（最小权限原则）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android NE（Native Exception）</title>
      <link>https://yangyang48.github.io/2023/01/android-nenative-exception/</link>
      <pubDate>Sat, 07 Jan 2023 04:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/01/android-nenative-exception/</guid>
      <description>&lt;p&gt;Android是基于Linux存在的，常常有使用c/c++代码库编写native进程或者动态库的情况，这些库在运行时发生的异常统称Native Exception。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>socket简单实现（Linux附Android源码）</title>
      <link>https://yangyang48.github.io/2023/01/socket%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0linux%E9%99%84android%E6%BA%90%E7%A0%81/</link>
      <pubDate>Mon, 02 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2023/01/socket%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0linux%E9%99%84android%E6%BA%90%E7%A0%81/</guid>
      <description>&lt;p&gt;在Linux中的socket用法，它是一种RPC的机制，通过通过客户端和服务端相连，产生socket句柄，通过句柄完成数据的传输通信。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java Thread</title>
      <link>https://yangyang48.github.io/2022/12/java-thread/</link>
      <pubDate>Thu, 22 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/12/java-thread/</guid>
      <description>&lt;p&gt;除了本身的并发编程，再聊聊Thread本身的特性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux clone</title>
      <link>https://yangyang48.github.io/2022/12/linux-clone/</link>
      <pubDate>Wed, 21 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/12/linux-clone/</guid>
      <description>&lt;p&gt;学习Linux中的clone函数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux dup and dup2</title>
      <link>https://yangyang48.github.io/2022/12/linux-dup-and-dup2/</link>
      <pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/12/linux-dup-and-dup2/</guid>
      <description>&lt;p&gt;学习Linux中的dup/dup2函数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android signal and crash</title>
      <link>https://yangyang48.github.io/2022/12/android-signal-and-crash/</link>
      <pubDate>Wed, 07 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/12/android-signal-and-crash/</guid>
      <description>&lt;p&gt;Android发生crash往往可以通过信号(signal)，那么我们怎么使用这个信号或者做处理呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一文带你了解ANR</title>
      <link>https://yangyang48.github.io/2022/12/%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3anr/</link>
      <pubDate>Tue, 06 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/12/%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3anr/</guid>
      <description>&lt;p&gt;Android中有时候会出现ANR，那么本文来描述，解开这个ANR神秘的面纱。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>am broadcast发送广播源码分析</title>
      <link>https://yangyang48.github.io/2022/12/am-broadcast%E5%8F%91%E9%80%81%E5%B9%BF%E6%92%AD%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 05 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/12/am-broadcast%E5%8F%91%E9%80%81%E5%B9%BF%E6%92%AD%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;Android中广播可以adb调试发送，am broadcast，本文主要分析这个广播源码。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>addr2line工具使用</title>
      <link>https://yangyang48.github.io/2022/12/addr2line%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 03 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/12/addr2line%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;Android中有一些常见的调试技巧，比如addr2line，用于将函数地址解析为函数名。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android智能指针解析</title>
      <link>https://yangyang48.github.io/2022/11/android%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Sun, 27 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/11/android%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E8%A7%A3%E6%9E%90/</guid>
      <description>&lt;p&gt;Android源码中有大量的智能指针，它们经常使用，通常一个类前会修饰sp或者wp，这种修饰即为智能指针。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>广度优先搜索</title>
      <link>https://yangyang48.github.io/2022/11/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Sun, 06 Nov 2022 13:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/11/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</guid>
      <description>&lt;p&gt;学习广度优先搜索(BFS)方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>深度优先搜索</title>
      <link>https://yangyang48.github.io/2022/11/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Sun, 06 Nov 2022 12:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/11/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</guid>
      <description>&lt;p&gt;学习深度优先搜索(DFS)方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>子数组最大平均数</title>
      <link>https://yangyang48.github.io/2022/11/%E5%AD%90%E6%95%B0%E7%BB%84%E6%9C%80%E5%A4%A7%E5%B9%B3%E5%9D%87%E6%95%B0/</link>
      <pubDate>Sun, 06 Nov 2022 11:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/11/%E5%AD%90%E6%95%B0%E7%BB%84%E6%9C%80%E5%A4%A7%E5%B9%B3%E5%9D%87%E6%95%B0/</guid>
      <description>&lt;p&gt;子数组最大平均数。采用&lt;strong&gt;滑动窗口&lt;/strong&gt;方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>三个数的最大乘积</title>
      <link>https://yangyang48.github.io/2022/11/%E4%B8%89%E4%B8%AA%E6%95%B0%E7%9A%84%E6%9C%80%E5%A4%A7%E4%B9%98%E7%A7%AF/</link>
      <pubDate>Sun, 06 Nov 2022 10:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/11/%E4%B8%89%E4%B8%AA%E6%95%B0%E7%9A%84%E6%9C%80%E5%A4%A7%E4%B9%98%E7%A7%AF/</guid>
      <description>&lt;p&gt;三个数的最大乘积。采用线性扫描方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>求斐波那契数列第N位的值</title>
      <link>https://yangyang48.github.io/2022/11/%E6%B1%82%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E7%AC%ACn%E4%BD%8D%E7%9A%84%E5%80%BC/</link>
      <pubDate>Sun, 06 Nov 2022 09:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/11/%E6%B1%82%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E7%AC%ACn%E4%BD%8D%E7%9A%84%E5%80%BC/</guid>
      <description>&lt;p&gt;求斐波那契数列第N位的值。采用双指针迭代方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>寻X的平方根</title>
      <link>https://yangyang48.github.io/2022/11/%E5%AF%BBx%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/</link>
      <pubDate>Tue, 01 Nov 2022 08:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/11/%E5%AF%BBx%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/</guid>
      <description>&lt;p&gt;X的平方根。采用二分查找或者牛顿迭代方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>寻找数组的中心下标</title>
      <link>https://yangyang48.github.io/2022/11/%E5%AF%BB%E6%89%BE%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E5%BF%83%E4%B8%8B%E6%A0%87/</link>
      <pubDate>Tue, 01 Nov 2022 07:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/11/%E5%AF%BB%E6%89%BE%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E5%BF%83%E4%B8%8B%E6%A0%87/</guid>
      <description>&lt;p&gt;寻找数组的中心下标。采用双指针。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>统计素数个数</title>
      <link>https://yangyang48.github.io/2022/11/%E7%BB%9F%E8%AE%A1%E7%B4%A0%E6%95%B0%E4%B8%AA%E6%95%B0/</link>
      <pubDate>Tue, 01 Nov 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/11/%E7%BB%9F%E8%AE%A1%E7%B4%A0%E6%95%B0%E4%B8%AA%E6%95%B0/</guid>
      <description>&lt;p&gt;统计素数个数。采用埃氏筛选。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode 470用 Rand7() 实现 Rand10()</title>
      <link>https://yangyang48.github.io/2022/10/leetcode-470%E7%94%A8-rand7-%E5%AE%9E%E7%8E%B0-rand10/</link>
      <pubDate>Sun, 30 Oct 2022 10:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/10/leetcode-470%E7%94%A8-rand7-%E5%AE%9E%E7%8E%B0-rand10/</guid>
      <description>&lt;p&gt;leetcode第470题，用 Rand7() 实现 Rand10()。采用拒绝采样来完成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode 121买卖股票的最佳时机</title>
      <link>https://yangyang48.github.io/2022/10/leetcode-121%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</link>
      <pubDate>Sun, 30 Oct 2022 08:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/10/leetcode-121%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</guid>
      <description>&lt;p&gt;leetcode第121题，买卖股票的最佳时机。采用动态规划或者类似双指针来完成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode 53最大子数组和</title>
      <link>https://yangyang48.github.io/2022/10/leetcode-53%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/</link>
      <pubDate>Sun, 30 Oct 2022 07:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/10/leetcode-53%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/</guid>
      <description>&lt;p&gt;leetcode第53题，最大子数组和。采用动态规划来完成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode 509斐波那契数</title>
      <link>https://yangyang48.github.io/2022/10/leetcode-509%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0/</link>
      <pubDate>Sun, 30 Oct 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/10/leetcode-509%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0/</guid>
      <description>&lt;p&gt;leetcode第509题，斐波那契数。一般可以直接使用循环或者递归的方式(类似一维DP数组)，这里采用动态规划来完成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>动态规划</title>
      <link>https://yangyang48.github.io/2022/10/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Sun, 30 Oct 2022 05:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/10/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>&lt;p&gt;数据结构中的动态规划，一起学习一下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>字符串匹配 BF(Brute Force)</title>
      <link>https://yangyang48.github.io/2022/10/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D-bfbrute-force/</link>
      <pubDate>Sat, 29 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/10/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D-bfbrute-force/</guid>
      <description>&lt;p&gt;经典的字符串匹配算法，BF(Brute Force)算法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>字符串匹配 BM(Boyer-Moore)</title>
      <link>https://yangyang48.github.io/2022/10/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D-bmboyer-moore/</link>
      <pubDate>Sat, 29 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/10/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D-bmboyer-moore/</guid>
      <description>&lt;p&gt;经典的字符串匹配算法，BM(Boyer-Moore)算法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>字符串匹配 KMP(Knuth-Morris-Pratt)</title>
      <link>https://yangyang48.github.io/2022/10/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D-kmpknuth-morris-pratt/</link>
      <pubDate>Sat, 29 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/10/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D-kmpknuth-morris-pratt/</guid>
      <description>&lt;p&gt;经典的字符串匹配算法，KMP(Knuth-Morris-Pratt)算法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode 415字符串相加</title>
      <link>https://yangyang48.github.io/2022/10/leetcode-415%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%8A%A0/</link>
      <pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/10/leetcode-415%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%8A%A0/</guid>
      <description>&lt;p&gt;leetcode第415题，字符串相加。采用字符串处理方式来完成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode 20有效的括号</title>
      <link>https://yangyang48.github.io/2022/10/leetcode-20%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</link>
      <pubDate>Thu, 27 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/10/leetcode-20%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</guid>
      <description>&lt;p&gt;leetcode第20题，有效的括号。采用栈来完成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode 461汉明距离</title>
      <link>https://yangyang48.github.io/2022/10/leetcode-461%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/</link>
      <pubDate>Wed, 26 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/10/leetcode-461%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/</guid>
      <description>&lt;p&gt;leetcode第461题，汉明距离。采用位运算来完成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode 338比特位计数</title>
      <link>https://yangyang48.github.io/2022/10/leetcode-338%E6%AF%94%E7%89%B9%E4%BD%8D%E8%AE%A1%E6%95%B0/</link>
      <pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/10/leetcode-338%E6%AF%94%E7%89%B9%E4%BD%8D%E8%AE%A1%E6%95%B0/</guid>
      <description>&lt;p&gt;leetcode第338题，比特位计数。采用位运算或者奇偶性来完成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode 136只出现一次的数字</title>
      <link>https://yangyang48.github.io/2022/10/leetcode-136%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/</link>
      <pubDate>Mon, 24 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/10/leetcode-136%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/</guid>
      <description>&lt;p&gt;leetcode第136题，只出现一次的数字。采用位运算来完成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>排序 10基数排序</title>
      <link>https://yangyang48.github.io/2022/10/%E6%8E%92%E5%BA%8F-10%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 23 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/10/%E6%8E%92%E5%BA%8F-10%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</guid>
      <description>&lt;p&gt;经典的排序算法，基数排序&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>排序 9桶排序</title>
      <link>https://yangyang48.github.io/2022/10/%E6%8E%92%E5%BA%8F-9%E6%A1%B6%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sat, 22 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/10/%E6%8E%92%E5%BA%8F-9%E6%A1%B6%E6%8E%92%E5%BA%8F/</guid>
      <description>&lt;p&gt;经典的排序算法，桶排序，用到了桶的概念&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>排序 8计数排序</title>
      <link>https://yangyang48.github.io/2022/10/%E6%8E%92%E5%BA%8F-8%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Fri, 14 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/10/%E6%8E%92%E5%BA%8F-8%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/</guid>
      <description>&lt;p&gt;经典的排序算法，计数排序，用到了桶的概念&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>排序 7堆排序</title>
      <link>https://yangyang48.github.io/2022/10/%E6%8E%92%E5%BA%8F-7%E5%A0%86%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Thu, 13 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/10/%E6%8E%92%E5%BA%8F-7%E5%A0%86%E6%8E%92%E5%BA%8F/</guid>
      <description>&lt;p&gt;经典的排序算法，堆排序&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>排序 6归并排序</title>
      <link>https://yangyang48.github.io/2022/10/%E6%8E%92%E5%BA%8F-6%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/10/%E6%8E%92%E5%BA%8F-6%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</guid>
      <description>&lt;p&gt;经典的排序算法，归并排序&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>排序 5希尔排序</title>
      <link>https://yangyang48.github.io/2022/10/%E6%8E%92%E5%BA%8F-5%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/10/%E6%8E%92%E5%BA%8F-5%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</guid>
      <description>&lt;p&gt;经典的排序算法，希尔排序&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>排序 4快速排序</title>
      <link>https://yangyang48.github.io/2022/10/%E6%8E%92%E5%BA%8F-4%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Mon, 10 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/10/%E6%8E%92%E5%BA%8F-4%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</guid>
      <description>&lt;p&gt;经典的排序算法，快速排序&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>排序 3插入排序</title>
      <link>https://yangyang48.github.io/2022/10/%E6%8E%92%E5%BA%8F-3%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/10/%E6%8E%92%E5%BA%8F-3%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</guid>
      <description>&lt;p&gt;经典的排序算法，插入排序&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>排序 2选择排序</title>
      <link>https://yangyang48.github.io/2022/10/%E6%8E%92%E5%BA%8F-2%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sat, 08 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/10/%E6%8E%92%E5%BA%8F-2%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</guid>
      <description>&lt;p&gt;经典的排序算法，选择排序&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>排序 1冒泡排序</title>
      <link>https://yangyang48.github.io/2022/10/%E6%8E%92%E5%BA%8F-1%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/10/%E6%8E%92%E5%BA%8F-1%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</guid>
      <description>&lt;p&gt;经典的排序算法，冒泡排序&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>不务正业系列 1自动推送早安助手</title>
      <link>https://yangyang48.github.io/2022/09/%E4%B8%8D%E5%8A%A1%E6%AD%A3%E4%B8%9A%E7%B3%BB%E5%88%97-1%E8%87%AA%E5%8A%A8%E6%8E%A8%E9%80%81%E6%97%A9%E5%AE%89%E5%8A%A9%E6%89%8B/</link>
      <pubDate>Sun, 25 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/09/%E4%B8%8D%E5%8A%A1%E6%AD%A3%E4%B8%9A%E7%B3%BB%E5%88%97-1%E8%87%AA%E5%8A%A8%E6%8E%A8%E9%80%81%E6%97%A9%E5%AE%89%E5%8A%A9%E6%89%8B/</guid>
      <description>&lt;p&gt;今天看到某红书上已经有人在推自动推送早安助手，这个使用起来看难度不高，安排！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode 101对称二叉树</title>
      <link>https://yangyang48.github.io/2022/09/leetcode-101%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/09/leetcode-101%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>&lt;p&gt;leetcode第101题，对称二叉树。采用数组递归或者循环算法(数据结构采用队列)来完成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode Hot100二叉树的前中后序遍历</title>
      <link>https://yangyang48.github.io/2022/09/leetcode-hot100%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E4%B8%AD%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/</link>
      <pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/09/leetcode-hot100%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E4%B8%AD%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/</guid>
      <description>&lt;p&gt;leetcode第101题，对称二叉树。采用数组递归或者循环算法(数据结构采用栈)来完成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 三种继承方式</title>
      <link>https://yangyang48.github.io/2022/09/c-%E4%B8%89%E7%A7%8D%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Mon, 12 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/09/c-%E4%B8%89%E7%A7%8D%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F/</guid>
      <description>&lt;p&gt;Android源码中有一些经常会遇到的c++基础的内容，笔者对C++ 三种继承方式进行简单熟悉。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; std::lock_guard</title>
      <link>https://yangyang48.github.io/2022/09/c-stdlock_guard/</link>
      <pubDate>Sun, 04 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/09/c-stdlock_guard/</guid>
      <description>&lt;p&gt;Android源码中有一些经常会遇到的c++基础的内容，笔者对C++ std::lock_guard进行简单熟悉。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; std::move</title>
      <link>https://yangyang48.github.io/2022/08/c-stdmove/</link>
      <pubDate>Sun, 28 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/08/c-stdmove/</guid>
      <description>&lt;p&gt;Android源码中有一些经常会遇到的c++基础的内容，笔者对std::move函数进行简单熟悉。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 变长数组</title>
      <link>https://yangyang48.github.io/2022/08/c-%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sun, 28 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/08/c-%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84/</guid>
      <description>&lt;p&gt;Android源码中有一些经常会遇到的c++基础的内容，笔者对C++ 变长数组进行简单熟悉。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C语言中的`%*s` 和 `%.*s`</title>
      <link>https://yangyang48.github.io/2022/08/c%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84s-%E5%92%8C-.s/</link>
      <pubDate>Sun, 28 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/08/c%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84s-%E5%92%8C-.s/</guid>
      <description>&lt;p&gt;Android源码中有一些经常会遇到的c++基础的内容，笔者对C语言中的&lt;code&gt;%*s&lt;/code&gt; 和 &lt;code&gt;%.*s&lt;/code&gt;进行简单熟悉。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode 1984学生分数的最小差值</title>
      <link>https://yangyang48.github.io/2022/08/leetcode-1984%E5%AD%A6%E7%94%9F%E5%88%86%E6%95%B0%E7%9A%84%E6%9C%80%E5%B0%8F%E5%B7%AE%E5%80%BC/</link>
      <pubDate>Sat, 27 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/08/leetcode-1984%E5%AD%A6%E7%94%9F%E5%88%86%E6%95%B0%E7%9A%84%E6%9C%80%E5%B0%8F%E5%B7%AE%E5%80%BC/</guid>
      <description>&lt;p&gt;leetcode第1984题，学生分数的最小差值。采用排序+滑动窗口的算法来完成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode 232用栈实现队列</title>
      <link>https://yangyang48.github.io/2022/08/leetcode-232%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</link>
      <pubDate>Fri, 26 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/08/leetcode-232%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</guid>
      <description>&lt;p&gt;leetcode第232题，用栈实现队列。采用栈的算法来完成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode 394字符串解码</title>
      <link>https://yangyang48.github.io/2022/08/leetcode-394%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E7%A0%81/</link>
      <pubDate>Thu, 25 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/08/leetcode-394%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E7%A0%81/</guid>
      <description>&lt;p&gt;leetcode第394题，字符串解码。采用栈的算法来完成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android Property详解</title>
      <link>https://yangyang48.github.io/2022/08/android-property%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 21 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/08/android-property%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;p&gt;Android系统中的属性，我们可以通过get和set去获取，但是有时候App获取修改属性的操作被拒绝了，这个就需要深入了解属性系统。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode之剑指Offer 22链表中倒数第k个节点</title>
      <link>https://yangyang48.github.io/2022/08/leetcode%E4%B9%8B%E5%89%91%E6%8C%87offer-22%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/</link>
      <pubDate>Thu, 18 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/08/leetcode%E4%B9%8B%E5%89%91%E6%8C%87offer-22%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/</guid>
      <description>&lt;p&gt;leetcode之剑指Offer22题，链表中倒数第k个节点。采用双指针的算法来完成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode 876链表的中间结点</title>
      <link>https://yangyang48.github.io/2022/08/leetcode-876%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E7%BB%93%E7%82%B9/</link>
      <pubDate>Wed, 17 Aug 2022 08:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/08/leetcode-876%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E7%BB%93%E7%82%B9/</guid>
      <description>&lt;p&gt;leetcode第876题，链表的中间结点。采用双指针的算法来完成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode 234回文链表</title>
      <link>https://yangyang48.github.io/2022/08/leetcode-234%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Wed, 17 Aug 2022 07:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/08/leetcode-234%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/</guid>
      <description>&lt;p&gt;leetcode第234题，回文链表。采用双指针+迭代的算法来完成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode 206反转链表</title>
      <link>https://yangyang48.github.io/2022/08/leetcode-206%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Wed, 17 Aug 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/08/leetcode-206%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</guid>
      <description>&lt;p&gt;leetcode第206题，反转链表。采用迭代的算法来完成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode 160相交链表</title>
      <link>https://yangyang48.github.io/2022/08/leetcode-160%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Tue, 16 Aug 2022 10:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/08/leetcode-160%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</guid>
      <description>&lt;p&gt;leetcode第160题，相交链表。采用双指针的算法来完成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode 142环形链表 II</title>
      <link>https://yangyang48.github.io/2022/08/leetcode-142%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8-ii/</link>
      <pubDate>Tue, 16 Aug 2022 09:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/08/leetcode-142%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8-ii/</guid>
      <description>&lt;p&gt;leetcode第142题，环形链表2。采用双指针的算法来完成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode 141环形链表</title>
      <link>https://yangyang48.github.io/2022/08/leetcode-141%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Tue, 16 Aug 2022 08:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/08/leetcode-141%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</guid>
      <description>&lt;p&gt;leetcode第141题，环形链表。采用双指针的算法来完成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode 83删除排序链表中的重复元素</title>
      <link>https://yangyang48.github.io/2022/08/leetcode-83%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</link>
      <pubDate>Tue, 16 Aug 2022 07:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/08/leetcode-83%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</guid>
      <description>&lt;p&gt;leetcode第83题，删除排序链表中的重复元素。采用指针指向越过下一个结点的算法来完成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode 21合并两个有序链表</title>
      <link>https://yangyang48.github.io/2022/08/leetcode-21%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Tue, 16 Aug 2022 06:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/08/leetcode-21%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</guid>
      <description>&lt;p&gt;leetcode第21题，合并两个有序链表。采用双指针的算法来完成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode 448找到所有数组中消失的数字</title>
      <link>https://yangyang48.github.io/2022/08/leetcode-448%E6%89%BE%E5%88%B0%E6%89%80%E6%9C%89%E6%95%B0%E7%BB%84%E4%B8%AD%E6%B6%88%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/</link>
      <pubDate>Mon, 15 Aug 2022 10:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/08/leetcode-448%E6%89%BE%E5%88%B0%E6%89%80%E6%9C%89%E6%95%B0%E7%BB%84%E4%B8%AD%E6%B6%88%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/</guid>
      <description>&lt;p&gt;leetcode第448题，找到所有数组中消失的数字。采用数组元素改变(加或者减)的算法来完成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode 283移动零</title>
      <link>https://yangyang48.github.io/2022/08/leetcode-283%E7%A7%BB%E5%8A%A8%E9%9B%B6/</link>
      <pubDate>Mon, 15 Aug 2022 09:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/08/leetcode-283%E7%A7%BB%E5%8A%A8%E9%9B%B6/</guid>
      <description>&lt;p&gt;leetcode第283题，移动零。采用双指针的算法来完成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Leetcode 88合并两个有序数组</title>
      <link>https://yangyang48.github.io/2022/08/leetcode-88%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</link>
      <pubDate>Mon, 15 Aug 2022 08:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/08/leetcode-88%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</guid>
      <description>&lt;p&gt;leetcode第88题，合并两个有序数组。采用双指针的算法来完成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode 1两数之和</title>
      <link>https://yangyang48.github.io/2022/08/leetcode-1%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Sun, 14 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/08/leetcode-1%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
      <description>&lt;p&gt;leetcode第1题，两数之和。采用双指针的算法来完成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>操作系统学习笔记 13文件系统</title>
      <link>https://yangyang48.github.io/2022/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-13%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Sun, 07 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-13%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</guid>
      <description>&lt;p&gt;熟悉完操作系统的第十二篇章，开始学习第十三篇章，关于操作系统的文件系统。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>操作系统学习笔记 12进程间通信</title>
      <link>https://yangyang48.github.io/2022/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-12%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Sat, 06 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-12%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</guid>
      <description>&lt;p&gt;熟悉完操作系统的第十一篇章，开始学习第十二篇章，关于操作系统的进程间通信。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>操作系统学习笔记 11死锁</title>
      <link>https://yangyang48.github.io/2022/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-11%E6%AD%BB%E9%94%81/</link>
      <pubDate>Sun, 31 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-11%E6%AD%BB%E9%94%81/</guid>
      <description>&lt;p&gt;熟悉完操作系统的第十篇章，开始学习第十一篇章，关于操作系统的死锁。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>操作系统学习笔记 10信号量&amp;管程</title>
      <link>https://yangyang48.github.io/2022/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-10%E4%BF%A1%E5%8F%B7%E9%87%8F%E7%AE%A1%E7%A8%8B/</link>
      <pubDate>Sat, 30 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-10%E4%BF%A1%E5%8F%B7%E9%87%8F%E7%AE%A1%E7%A8%8B/</guid>
      <description>&lt;p&gt;熟悉完操作系统的第九篇章，开始学习第十篇章，关于操作系统的信号量&amp;amp;管程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ioctl通信方式之初出茅庐</title>
      <link>https://yangyang48.github.io/2022/07/ioctl%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%E4%B9%8B%E5%88%9D%E5%87%BA%E8%8C%85%E5%BA%90/</link>
      <pubDate>Sun, 24 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/07/ioctl%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%E4%B9%8B%E5%88%9D%E5%87%BA%E8%8C%85%E5%BA%90/</guid>
      <description>&lt;p&gt;我们通常用ioctl函数直接访问到内核，在内核执行操作，执行读写操作。那么这个函数指令的原理是什么，本文就展开介绍和使用一下ioctl。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>操作系统学习笔记 9同步&amp;互斥</title>
      <link>https://yangyang48.github.io/2022/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-9%E5%90%8C%E6%AD%A5%E4%BA%92%E6%96%A5/</link>
      <pubDate>Mon, 18 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-9%E5%90%8C%E6%AD%A5%E4%BA%92%E6%96%A5/</guid>
      <description>&lt;p&gt;熟悉完操作系统的第八篇章，开始学习第九篇章，关于操作系统的同步&amp;amp;互斥。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>操作系统学习笔记 8CPU调度</title>
      <link>https://yangyang48.github.io/2022/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-8cpu%E8%B0%83%E5%BA%A6/</link>
      <pubDate>Sun, 17 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-8cpu%E8%B0%83%E5%BA%A6/</guid>
      <description>&lt;p&gt;熟悉完操作系统的第七篇章，开始学习第八篇章，关于操作系统的CPU调度。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Typora使用过期解决方案</title>
      <link>https://yangyang48.github.io/2022/07/typora%E4%BD%BF%E7%94%A8%E8%BF%87%E6%9C%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
      <pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/07/typora%E4%BD%BF%E7%94%A8%E8%BF%87%E6%9C%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
      <description>&lt;p&gt;Typora使用过期解决方案。基于This beta version of Typora is expired, please download and install a newer version.的解决方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>操作系统学习笔记 7进程管理</title>
      <link>https://yangyang48.github.io/2022/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-7%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sun, 10 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-7%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;p&gt;熟悉完操作系统的第六篇章，开始学习第七篇章，关于操作系统的进程管理。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>操作系统学习笔记 6页面置换算法</title>
      <link>https://yangyang48.github.io/2022/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-6%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 03 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-6%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;p&gt;熟悉完操作系统的第五篇章，开始学习第六篇章，关于操作系统的页面置换算法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>操作系统学习笔记 5虚拟内存</title>
      <link>https://yangyang48.github.io/2022/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-5%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</link>
      <pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-5%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</guid>
      <description>&lt;p&gt;熟悉完操作系统的第四篇章，开始学习第五篇章，关于操作系统的虚拟内存。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>操作系统学习笔记 4非连续内存分配</title>
      <link>https://yangyang48.github.io/2022/06/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-4%E9%9D%9E%E8%BF%9E%E7%BB%AD%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</link>
      <pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/06/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-4%E9%9D%9E%E8%BF%9E%E7%BB%AD%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</guid>
      <description>&lt;p&gt;熟悉完操作系统的第三篇章，开始学习第四篇章，关于操作系统的非连续内存分配。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>操作系统学习笔记 3内存管理</title>
      <link>https://yangyang48.github.io/2022/06/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sun, 19 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/06/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;p&gt;熟悉完操作系统的第二篇章，开始学习第三篇章，关于操作系统的内存管理。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>操作系统学习笔记 2操作系统介绍</title>
      <link>https://yangyang48.github.io/2022/06/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/06/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;p&gt;熟悉完操作系统的第一篇章，开始学习第二篇章，关于操作系统的介绍。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>操作系统学习笔记 1概述</title>
      <link>https://yangyang48.github.io/2022/06/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/06/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1%E6%A6%82%E8%BF%B0/</guid>
      <description>&lt;p&gt;感觉在学习Android系统的过程中，越来越发现自己的计算机相关基础比较薄弱。新开一个篇章记录学习操作系统，纸上得来终觉浅，还是需要不断学习。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>socket简单实现（Java版）</title>
      <link>https://yangyang48.github.io/2022/06/socket%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0java%E7%89%88/</link>
      <pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/06/socket%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0java%E7%89%88/</guid>
      <description>&lt;p&gt;Android中除了Binder之外，还有其他的跨进程通信。socket就是其中之一，多用于进程的启动还有日志等模块中的通信，是Android系统不可缺少的一部分。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vsync信号机制浅析</title>
      <link>https://yangyang48.github.io/2022/05/vsync%E4%BF%A1%E5%8F%B7%E6%9C%BA%E5%88%B6%E6%B5%85%E6%9E%90/</link>
      <pubDate>Tue, 31 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/05/vsync%E4%BF%A1%E5%8F%B7%E6%9C%BA%E5%88%B6%E6%B5%85%E6%9E%90/</guid>
      <description>&lt;p&gt;在前面的学习中，了解到了实际上是存在硬件的Vsync信号和软件的Vsync信号，那么这两个信号是怎么工作的呢&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>初识choreographer</title>
      <link>https://yangyang48.github.io/2022/05/%E5%88%9D%E8%AF%86choreographer/</link>
      <pubDate>Wed, 04 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/05/%E5%88%9D%E8%AF%86choreographer/</guid>
      <description>&lt;p&gt;屏幕的刷新率一般为60fps，当然最新的手机刷新率更高，这一切都是surfacelinger的安排，通过一个叫Choreographer来监控和保证应用的帧率为固定的1/60s。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>dumpsys简介 以media.camera为例</title>
      <link>https://yangyang48.github.io/2022/04/dumpsys%E7%AE%80%E4%BB%8B-%E4%BB%A5media.camera%E4%B8%BA%E4%BE%8B/</link>
      <pubDate>Sun, 17 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/04/dumpsys%E7%AE%80%E4%BB%8B-%E4%BB%A5media.camera%E4%B8%BA%E4%BE%8B/</guid>
      <description>&lt;p&gt;dumpsys是一种在Android设备上运行的工具，可提供有关系统服务的信息。在相机开发的过程中，关于一些相机的配置可以直接dumpsyss media.camera来查看。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ThreadLocal之子父线程的恩爱情仇</title>
      <link>https://yangyang48.github.io/2022/04/threadlocal%E4%B9%8B%E5%AD%90%E7%88%B6%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%81%A9%E7%88%B1%E6%83%85%E4%BB%87/</link>
      <pubDate>Sun, 10 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/04/threadlocal%E4%B9%8B%E5%AD%90%E7%88%B6%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%81%A9%E7%88%B1%E6%83%85%E4%BB%87/</guid>
      <description>&lt;p&gt;我们知道Thread中会维护两个ThreadLocalMap，这个时候如果同时存在子父线程，子线程该如何获取父线程ThreadLocal的值&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>linux2 权限和管理</title>
      <link>https://yangyang48.github.io/2022/04/linux2-%E6%9D%83%E9%99%90%E5%92%8C%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 05 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/04/linux2-%E6%9D%83%E9%99%90%E5%92%8C%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;p&gt;Linux中万物皆可文件，但是文件的管理，用户的管理，文件的权限，用户的权限如果没有搞清楚的话，那么就不是一名合格的程序员了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>linux3 Vim和shell脚本</title>
      <link>https://yangyang48.github.io/2022/04/linux3-vim%E5%92%8Cshell%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Tue, 05 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/04/linux3-vim%E5%92%8Cshell%E8%84%9A%E6%9C%AC/</guid>
      <description>&lt;p&gt;在Linux文本编辑器的江湖中一直有一个神器Vim，这个神奇可以满足日常编辑的所有需求。通过Vim可以进一步的学习关于Shell的脚本，提升操作Linux效率。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HIDL介绍和使用</title>
      <link>https://yangyang48.github.io/2022/03/hidl%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 27 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/03/hidl%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;AIDL并不是唯一的Binder的应用，除了AIDL还有一个经常在HAL层代码中出现的HIDL。本文就是通过HIDL展开描述，主要对于AIDL的介绍和使用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>linux1 基础学习</title>
      <link>https://yangyang48.github.io/2022/03/linux1-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/03/linux1-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</guid>
      <description>&lt;p&gt;Linux是一个操作系统。它有正则表达式、网络协议、系统管理、版本控制、运维、交叉编译，烧录等等功能。所以一名Android开发人员熟练掌握Linux是基本功。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AIDL3 JAVA和C&#43;&#43;通信</title>
      <link>https://yangyang48.github.io/2022/03/aidl3-java%E5%92%8Cc-%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Tue, 08 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/03/aidl3-java%E5%92%8Cc-%E9%80%9A%E4%BF%A1/</guid>
      <description>&lt;p&gt;祝各位女神3.8快乐~最近在阅读Android源码的过程中再次遇到AIDL。和以往不同，这次是Java层和c++层的相互调用，跟以往App端的两个Java进程的IPC通信有区别。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>linux4 NDK交叉编译</title>
      <link>https://yangyang48.github.io/2022/03/linux4-ndk%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</link>
      <pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/03/linux4-ndk%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</guid>
      <description>&lt;p&gt;在当前编译平台下，编译出来的程序能运行在另一种目标平台上，但是编译平台本身却不能运行该程序。而我们在linux服务器编译的库可以直接在Android工程中编译。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ByteBuffer使用</title>
      <link>https://yangyang48.github.io/2022/02/bytebuffer%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 27 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/02/bytebuffer%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;ByteBuffer，一个字节缓冲区。我们通常通过这类缓冲区(Buffer)在内存中预留指定大小的存储空间用来对输入/输出(I/O)的数据作临时存储。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Parcel1 Parcel和Parcelable源码分析</title>
      <link>https://yangyang48.github.io/2022/02/parcel1-parcel%E5%92%8Cparcelable%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 20 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/02/parcel1-parcel%E5%92%8Cparcelable%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;Intent数据会作为Parcel被存储在Binder事务缓冲区中的对象进行传输。Parcel作为Android底层IPC通信的基础，熟悉Parcel作为了解Binder的第一步。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>并发编程3 阻塞队列和线程池</title>
      <link>https://yangyang48.github.io/2021/12/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B3-%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <pubDate>Sun, 19 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/12/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B3-%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <description>&lt;p&gt;在并发编程中，频繁的创建和销毁线程非常影响处理的效率，而且会使得线程抢占系统资源从而导致阻塞。这时候就需要线程池的帮助，线程池的创建离不开阻塞队列。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>并发编程2 CAS基本原理</title>
      <link>https://yangyang48.github.io/2021/12/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B2-cas%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/12/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B2-cas%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;p&gt;CAS(compare and Swap)是由硬件实现的。CAS可以将read- modify - write这类的操作转换为原子操作。jdk1.5之后引入CAS利用CPU原语保证线程操作的原子性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>并发编程1 java并发基础知识</title>
      <link>https://yangyang48.github.io/2021/12/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B1-java%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/12/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B1-java%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>&lt;p&gt;这块java并发基础知识主要是更全面的认识线程，了解线程，包括线程启动的二种方式、线程的生命周期、破坏死锁的四种方式和ThreadLocal。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式之代理模式</title>
      <link>https://yangyang48.github.io/2021/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sun, 28 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;比如你在澡堂洗完澡需要搓澡服务，你会联系大堂经理给你安排比较有名搓澡技师，这个时候大堂经理就会在预备的技师里面选一个给你服务。这种模式就是代理模式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AIDL2 源码分析</title>
      <link>https://yangyang48.github.io/2021/11/aidl2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/11/aidl2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;aidl一种android接口描述语言，本文主要是对.aidl文件自动生成的.java文件的具体源码进行分析，描述AIDL生成的java类细节。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android注解</title>
      <link>https://yangyang48.github.io/2021/11/android%E6%B3%A8%E8%A7%A3/</link>
      <pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/11/android%E6%B3%A8%E8%A7%A3/</guid>
      <description>&lt;p&gt;在代码中添加信息提供了一种形式化的方法，使我们可以在稍后某个时刻非常方便地使用这些数据。这就是注解，比如@Override，@Deprecated。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ThreadLocal之初出茅庐</title>
      <link>https://yangyang48.github.io/2021/11/threadlocal%E4%B9%8B%E5%88%9D%E5%87%BA%E8%8C%85%E5%BA%90/</link>
      <pubDate>Wed, 03 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/11/threadlocal%E4%B9%8B%E5%88%9D%E5%87%BA%E8%8C%85%E5%BA%90/</guid>
      <description>&lt;p&gt;我们使用ThreadLocal能够解决线程局部变量统一定义问题，多线程数据不能共享的问题，使得每一个线程单独维护自己线程内的变量值（set、get、remove）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android数据存储</title>
      <link>https://yangyang48.github.io/2021/10/android%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</link>
      <pubDate>Sun, 17 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/10/android%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</guid>
      <description>&lt;p&gt;如果我需要在音视频app中的登录界面记住账号密码，并且在音视频的传输过程中，将编码后的mp4文件和aac文件保存，这个就需要用到Android数据存储。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AIDL1 使用</title>
      <link>https://yangyang48.github.io/2021/08/aidl1-%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 29 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/08/aidl1-%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;第三方移动支付（银联/菜信等）使用微信/支付宝支付过程中，出现支付宝或者微信支付界面。
从一个APP到另一个APP调用的过程，就需要今天的主角AIDL来实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Recyclerview使用</title>
      <link>https://yangyang48.github.io/2021/08/recyclerview%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/08/recyclerview%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;RecyclerView，一个强大的控件，既支持纵向滚动，又支持横向滚动。
应用场景非常广泛，简单说ListView可以做的它可以做，ListView不支持的横向它也可以做。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Handler1-消息传递机制</title>
      <link>https://yangyang48.github.io/2021/08/handler1-%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/08/handler1-%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/</guid>
      <description>&lt;p&gt;Handler是一个优秀的内存共享方案。其内存管理和设计思路相当完整。
通过Handler来通知UI组件更新或者是处理对应消息。那么Handler消息机制是什么？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Handler2 Thread</title>
      <link>https://yangyang48.github.io/2021/08/handler2-thread/</link>
      <pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/08/handler2-thread/</guid>
      <description>&lt;p&gt;Android是基于事件驱动的，即所有的不管是Activity、Service生命周期都是通过handler事件驱动的。
那么Handler内部的线程是如何管理而且还能够保证安全。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Handler3 同步屏障</title>
      <link>https://yangyang48.github.io/2021/08/handler3-%E5%90%8C%E6%AD%A5%E5%B1%8F%E9%9A%9C/</link>
      <pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/08/handler3-%E5%90%8C%E6%AD%A5%E5%B1%8F%E9%9A%9C/</guid>
      <description>&lt;p&gt;学习Handler之后，通常会出现同步屏障的字样。MessageQueue管理优先级队列的过程中，如果消息存在一种“紧急”消息，
需要更高的优先级处理，这个时候就需要同步屏障。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Handler4 HandlerThread</title>
      <link>https://yangyang48.github.io/2021/08/handler4-handlerthread/</link>
      <pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/08/handler4-handlerthread/</guid>
      <description>&lt;p&gt;开发中我们需要去执行多个任务，且要求按顺序执行。如果使用多线程，有多个任务就多创建几个线程实现，这时候可能出现线程同步的问题。
如果需要管理这些线程，可以考虑使用HandlerThread。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Handler5 IntentService</title>
      <link>https://yangyang48.github.io/2021/08/handler5-intentservice/</link>
      <pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/08/handler5-intentservice/</guid>
      <description>&lt;p&gt;在Android开发中，需要在后台执行异步耗时请求，而且存在很多这种请求，那么怎么管理这些请求。
如果不断的创建线程，本身就非常耗性能，且不易管理，这个时候可以考虑使用IntentService。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一篇文章搞定广播</title>
      <link>https://yangyang48.github.io/2021/08/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E6%90%9E%E5%AE%9A%E5%B9%BF%E6%92%AD/</link>
      <pubDate>Sat, 14 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/08/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E6%90%9E%E5%AE%9A%E5%B9%BF%E6%92%AD/</guid>
      <description>&lt;p&gt;BroadcastReceiver，Android四大组件之一。
用于响应来自其他应用程序或者系统的广播消息。这些消息有时被称为事件或者意图。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RTMP封包</title>
      <link>https://yangyang48.github.io/2021/07/rtmp%E5%B0%81%E5%8C%85/</link>
      <pubDate>Sun, 25 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/07/rtmp%E5%B0%81%E5%8C%85/</guid>
      <description>&lt;p&gt;RTMP是Real Time Messaging Protocol（实时消息传输协议）的首字母缩写。
基于TCP的一个协议族，包括RTMP、RTMPT、RTMPS、RTMPE等多个协议。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一篇文章读懂unicode</title>
      <link>https://yangyang48.github.io/2021/07/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E8%AF%BB%E6%87%82unicode/</link>
      <pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/07/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E8%AF%BB%E6%87%82unicode/</guid>
      <description>&lt;p&gt;很多宝宝对unicode的基础概念，unicode、utf-8、char、GB2312傻傻分不清楚。
这篇文章带你揭开unicode神秘的面纱。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode 6Z字形变换</title>
      <link>https://yangyang48.github.io/2021/07/leetcode-6z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/</link>
      <pubDate>Sun, 11 Jul 2021 17:12:24 +0800</pubDate>
      
      <guid>https://yangyang48.github.io/2021/07/leetcode-6z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/</guid>
      <description>&lt;p&gt;leetcode第6题，采用动态规划的算法来完成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>unicode</title>
      <link>https://yangyang48.github.io/2021/07/unicode/</link>
      <pubDate>Sun, 11 Jul 2021 15:50:29 +0800</pubDate>
      
      <guid>https://yangyang48.github.io/2021/07/unicode/</guid>
      <description>&lt;p&gt;在开始这个问题之前首先提出几个问题，希望读者能带着这几个问题去看这篇文章&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tags plugins showcase</title>
      <link>https://yangyang48.github.io/2014/10/tags-plugins-showcase/</link>
      <pubDate>Wed, 29 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2014/10/tags-plugins-showcase/</guid>
      <description>&lt;p&gt;This post is used to show how tag plugins are displayed. See &lt;a href=&#34;https://github.com/kakawait/hugo-tranquilpeak-theme/blob/master/docs/user.md#tags&#34;&gt;docs&lt;/a&gt; for more info.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on 欢迎来到我的博客~</title>
    <link>https://yangyang48.github.io/tags/android/</link>
    <description>Recent content in Android on 欢迎来到我的博客~</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://yangyang48.github.io/tags/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>设计模式</title>
      <link>https://yangyang48.github.io/2021/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 28 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;设计模式代表了最佳的实践，是软件开发人员在软件开发过程中面临的一般问题的解决方案。笔者初衷用于对整体架构设计理解并记录，毕竟最好的学习就是输出。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java Thread</title>
      <link>https://yangyang48.github.io/2022/12/java-thread/</link>
      <pubDate>Thu, 22 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/12/java-thread/</guid>
      <description>&lt;p&gt;除了本身的并发编程，再聊聊Thread本身的特性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux clone</title>
      <link>https://yangyang48.github.io/2022/12/linux-clone/</link>
      <pubDate>Wed, 21 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/12/linux-clone/</guid>
      <description>&lt;p&gt;学习Linux中的clone函数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux dup and dup2</title>
      <link>https://yangyang48.github.io/2022/12/linux-dup-and-dup2/</link>
      <pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/12/linux-dup-and-dup2/</guid>
      <description>&lt;p&gt;学习Linux中的dup/dup2函数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android signal and crash</title>
      <link>https://yangyang48.github.io/2022/12/android-signal-and-crash/</link>
      <pubDate>Wed, 07 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/12/android-signal-and-crash/</guid>
      <description>&lt;p&gt;Android发生crash往往可以通过信号(signal)，那么我们怎么使用这个信号或者做处理呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一文带你了解ANR</title>
      <link>https://yangyang48.github.io/2022/12/%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3anr/</link>
      <pubDate>Tue, 06 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/12/%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3anr/</guid>
      <description>&lt;p&gt;Android中有时候会出现ANR，那么本文来描述，解开这个ANR神秘的面纱。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>am broadcast发送广播源码分析</title>
      <link>https://yangyang48.github.io/2022/12/am-broadcast%E5%8F%91%E9%80%81%E5%B9%BF%E6%92%AD%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 05 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/12/am-broadcast%E5%8F%91%E9%80%81%E5%B9%BF%E6%92%AD%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;Android中广播可以adb调试发送，am broadcast，本文主要分析这个广播源码。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>addr2line工具使用</title>
      <link>https://yangyang48.github.io/2022/12/addr2line%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 03 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/12/addr2line%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;Android中有一些常见的调试技巧，比如addr2line，用于将函数地址解析为函数名。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 三种继承方式</title>
      <link>https://yangyang48.github.io/2022/09/c-%E4%B8%89%E7%A7%8D%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Mon, 12 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/09/c-%E4%B8%89%E7%A7%8D%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F/</guid>
      <description>&lt;p&gt;Android源码中有一些经常会遇到的c++基础的内容，笔者对C++ 三种继承方式进行简单熟悉。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; std::lock_guard</title>
      <link>https://yangyang48.github.io/2022/09/c-stdlock_guard/</link>
      <pubDate>Sun, 04 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/09/c-stdlock_guard/</guid>
      <description>&lt;p&gt;Android源码中有一些经常会遇到的c++基础的内容，笔者对C++ std::lock_guard进行简单熟悉。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; std::move</title>
      <link>https://yangyang48.github.io/2022/08/c-stdmove/</link>
      <pubDate>Sun, 28 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/08/c-stdmove/</guid>
      <description>&lt;p&gt;Android源码中有一些经常会遇到的c++基础的内容，笔者对std::move函数进行简单熟悉。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 变长数组</title>
      <link>https://yangyang48.github.io/2022/08/c-%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sun, 28 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/08/c-%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84/</guid>
      <description>&lt;p&gt;Android源码中有一些经常会遇到的c++基础的内容，笔者对C++ 变长数组进行简单熟悉。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C语言中的`%*s` 和 `%.*s`</title>
      <link>https://yangyang48.github.io/2022/08/c%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84s-%E5%92%8C-.s/</link>
      <pubDate>Sun, 28 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/08/c%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84s-%E5%92%8C-.s/</guid>
      <description>&lt;p&gt;Android源码中有一些经常会遇到的c++基础的内容，笔者对C语言中的&lt;code&gt;%*s&lt;/code&gt; 和 &lt;code&gt;%.*s&lt;/code&gt;进行简单熟悉。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android Property详解</title>
      <link>https://yangyang48.github.io/2022/08/android-property%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 21 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/08/android-property%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;p&gt;Android系统中的属性，我们可以通过get和set去获取，但是有时候App获取修改属性的操作被拒绝了，这个就需要深入了解属性系统。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ioctl通信方式之初出茅庐</title>
      <link>https://yangyang48.github.io/2022/07/ioctl%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%E4%B9%8B%E5%88%9D%E5%87%BA%E8%8C%85%E5%BA%90/</link>
      <pubDate>Sun, 24 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/07/ioctl%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%E4%B9%8B%E5%88%9D%E5%87%BA%E8%8C%85%E5%BA%90/</guid>
      <description>&lt;p&gt;我们通常用ioctl函数直接访问到内核，在内核执行操作，执行读写操作。那么这个函数指令的原理是什么，本文就展开介绍和使用一下ioctl。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>socket简单实现（Java版）</title>
      <link>https://yangyang48.github.io/2022/06/socket%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0java%E7%89%88/</link>
      <pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/06/socket%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0java%E7%89%88/</guid>
      <description>&lt;p&gt;Android中除了Binder之外，还有其他的跨进程通信。socket就是其中之一，多用于进程的启动还有日志等模块中的通信，是Android系统不可缺少的一部分。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vsync信号机制浅析</title>
      <link>https://yangyang48.github.io/2022/05/vsync%E4%BF%A1%E5%8F%B7%E6%9C%BA%E5%88%B6%E6%B5%85%E6%9E%90/</link>
      <pubDate>Tue, 31 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/05/vsync%E4%BF%A1%E5%8F%B7%E6%9C%BA%E5%88%B6%E6%B5%85%E6%9E%90/</guid>
      <description>&lt;p&gt;在前面的学习中，了解到了实际上是存在硬件的Vsync信号和软件的Vsync信号，那么这两个信号是怎么工作的呢&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>初识choreographer</title>
      <link>https://yangyang48.github.io/2022/05/%E5%88%9D%E8%AF%86choreographer/</link>
      <pubDate>Wed, 04 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/05/%E5%88%9D%E8%AF%86choreographer/</guid>
      <description>&lt;p&gt;屏幕的刷新率一般为60fps，当然最新的手机刷新率更高，这一切都是surfacelinger的安排，通过一个叫Choreographer来监控和保证应用的帧率为固定的1/60s。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>dumpsys简介 以media.camera为例</title>
      <link>https://yangyang48.github.io/2022/04/dumpsys%E7%AE%80%E4%BB%8B-%E4%BB%A5media.camera%E4%B8%BA%E4%BE%8B/</link>
      <pubDate>Sun, 17 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/04/dumpsys%E7%AE%80%E4%BB%8B-%E4%BB%A5media.camera%E4%B8%BA%E4%BE%8B/</guid>
      <description>&lt;p&gt;dumpsys是一种在Android设备上运行的工具，可提供有关系统服务的信息。在相机开发的过程中，关于一些相机的配置可以直接dumpsyss media.camera来查看。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ThreadLocal之子父线程的恩爱情仇</title>
      <link>https://yangyang48.github.io/2022/04/threadlocal%E4%B9%8B%E5%AD%90%E7%88%B6%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%81%A9%E7%88%B1%E6%83%85%E4%BB%87/</link>
      <pubDate>Sun, 10 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/04/threadlocal%E4%B9%8B%E5%AD%90%E7%88%B6%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%81%A9%E7%88%B1%E6%83%85%E4%BB%87/</guid>
      <description>&lt;p&gt;我们知道Thread中会维护两个ThreadLocalMap，这个时候如果同时存在子父线程，子线程该如何获取父线程ThreadLocal的值&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HIDL介绍和使用</title>
      <link>https://yangyang48.github.io/2022/03/hidl%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 27 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/03/hidl%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;AIDL并不是唯一的Binder的应用，除了AIDL还有一个经常在HAL层代码中出现的HIDL。本文就是通过HIDL展开描述，主要对于AIDL的介绍和使用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AIDL3 JAVA和C&#43;&#43;通信</title>
      <link>https://yangyang48.github.io/2022/03/aidl3-java%E5%92%8Cc-%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Tue, 08 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/03/aidl3-java%E5%92%8Cc-%E9%80%9A%E4%BF%A1/</guid>
      <description>&lt;p&gt;祝各位女神3.8快乐~最近在阅读Android源码的过程中再次遇到AIDL。和以往不同，这次是Java层和c++层的相互调用，跟以往App端的两个Java进程的IPC通信有区别。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>linux4 NDK交叉编译</title>
      <link>https://yangyang48.github.io/2022/03/linux4-ndk%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</link>
      <pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/03/linux4-ndk%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</guid>
      <description>&lt;p&gt;在当前编译平台下，编译出来的程序能运行在另一种目标平台上，但是编译平台本身却不能运行该程序。而我们在linux服务器编译的库可以直接在Android工程中编译。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ByteBuffer使用</title>
      <link>https://yangyang48.github.io/2022/02/bytebuffer%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 27 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/02/bytebuffer%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;ByteBuffer，一个字节缓冲区。我们通常通过这类缓冲区(Buffer)在内存中预留指定大小的存储空间用来对输入/输出(I/O)的数据作临时存储。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Parcel1 Parcel和Parcelable源码分析</title>
      <link>https://yangyang48.github.io/2022/02/parcel1-parcel%E5%92%8Cparcelable%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 20 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/02/parcel1-parcel%E5%92%8Cparcelable%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;Intent数据会作为Parcel被存储在Binder事务缓冲区中的对象进行传输。Parcel作为Android底层IPC通信的基础，熟悉Parcel作为了解Binder的第一步。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式之代理模式</title>
      <link>https://yangyang48.github.io/2021/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sun, 28 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;比如你在澡堂洗完澡需要搓澡服务，你会联系大堂经理给你安排比较有名搓澡技师，这个时候大堂经理就会在预备的技师里面选一个给你服务。这种模式就是代理模式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AIDL2 源码分析</title>
      <link>https://yangyang48.github.io/2021/11/aidl2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/11/aidl2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;aidl一种android接口描述语言，本文主要是对.aidl文件自动生成的.java文件的具体源码进行分析，描述AIDL生成的java类细节。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android注解</title>
      <link>https://yangyang48.github.io/2021/11/android%E6%B3%A8%E8%A7%A3/</link>
      <pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/11/android%E6%B3%A8%E8%A7%A3/</guid>
      <description>&lt;p&gt;在代码中添加信息提供了一种形式化的方法，使我们可以在稍后某个时刻非常方便地使用这些数据。这就是注解，比如@Override，@Deprecated。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ThreadLocal之初出茅庐</title>
      <link>https://yangyang48.github.io/2021/11/threadlocal%E4%B9%8B%E5%88%9D%E5%87%BA%E8%8C%85%E5%BA%90/</link>
      <pubDate>Wed, 03 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/11/threadlocal%E4%B9%8B%E5%88%9D%E5%87%BA%E8%8C%85%E5%BA%90/</guid>
      <description>&lt;p&gt;我们使用ThreadLocal能够解决线程局部变量统一定义问题，多线程数据不能共享的问题，使得每一个线程单独维护自己线程内的变量值（set、get、remove）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android数据存储</title>
      <link>https://yangyang48.github.io/2021/10/android%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</link>
      <pubDate>Sun, 17 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/10/android%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</guid>
      <description>&lt;p&gt;如果我需要在音视频app中的登录界面记住账号密码，并且在音视频的传输过程中，将编码后的mp4文件和aac文件保存，这个就需要用到Android数据存储。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AIDL1 使用</title>
      <link>https://yangyang48.github.io/2021/08/aidl1-%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 29 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/08/aidl1-%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;第三方移动支付（银联/菜信等）使用微信/支付宝支付过程中，出现支付宝或者微信支付界面。
从一个APP到另一个APP调用的过程，就需要今天的主角AIDL来实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Recyclerview使用</title>
      <link>https://yangyang48.github.io/2021/08/recyclerview%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/08/recyclerview%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;RecyclerView，一个强大的控件，既支持纵向滚动，又支持横向滚动。
应用场景非常广泛，简单说ListView可以做的它可以做，ListView不支持的横向它也可以做。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Handler1-消息传递机制</title>
      <link>https://yangyang48.github.io/2021/08/handler1-%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/08/handler1-%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/</guid>
      <description>&lt;p&gt;Handler是一个优秀的内存共享方案。其内存管理和设计思路相当完整。
通过Handler来通知UI组件更新或者是处理对应消息。那么Handler消息机制是什么？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Handler2 Thread</title>
      <link>https://yangyang48.github.io/2021/08/handler2-thread/</link>
      <pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/08/handler2-thread/</guid>
      <description>&lt;p&gt;Android是基于事件驱动的，即所有的不管是Activity、Service生命周期都是通过handler事件驱动的。
那么Handler内部的线程是如何管理而且还能够保证安全。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Handler3 同步屏障</title>
      <link>https://yangyang48.github.io/2021/08/handler3-%E5%90%8C%E6%AD%A5%E5%B1%8F%E9%9A%9C/</link>
      <pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/08/handler3-%E5%90%8C%E6%AD%A5%E5%B1%8F%E9%9A%9C/</guid>
      <description>&lt;p&gt;学习Handler之后，通常会出现同步屏障的字样。MessageQueue管理优先级队列的过程中，如果消息存在一种“紧急”消息，
需要更高的优先级处理，这个时候就需要同步屏障。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Handler4 HandlerThread</title>
      <link>https://yangyang48.github.io/2021/08/handler4-handlerthread/</link>
      <pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/08/handler4-handlerthread/</guid>
      <description>&lt;p&gt;开发中我们需要去执行多个任务，且要求按顺序执行。如果使用多线程，有多个任务就多创建几个线程实现，这时候可能出现线程同步的问题。
如果需要管理这些线程，可以考虑使用HandlerThread。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Handler5 IntentService</title>
      <link>https://yangyang48.github.io/2021/08/handler5-intentservice/</link>
      <pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/08/handler5-intentservice/</guid>
      <description>&lt;p&gt;在Android开发中，需要在后台执行异步耗时请求，而且存在很多这种请求，那么怎么管理这些请求。
如果不断的创建线程，本身就非常耗性能，且不易管理，这个时候可以考虑使用IntentService。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一篇文章搞定广播</title>
      <link>https://yangyang48.github.io/2021/08/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E6%90%9E%E5%AE%9A%E5%B9%BF%E6%92%AD/</link>
      <pubDate>Sat, 14 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/08/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E6%90%9E%E5%AE%9A%E5%B9%BF%E6%92%AD/</guid>
      <description>&lt;p&gt;BroadcastReceiver，Android四大组件之一。
用于响应来自其他应用程序或者系统的广播消息。这些消息有时被称为事件或者意图。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RTMP封包</title>
      <link>https://yangyang48.github.io/2021/07/rtmp%E5%B0%81%E5%8C%85/</link>
      <pubDate>Sun, 25 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/07/rtmp%E5%B0%81%E5%8C%85/</guid>
      <description>&lt;p&gt;RTMP是Real Time Messaging Protocol（实时消息传输协议）的首字母缩写。
基于TCP的一个协议族，包括RTMP、RTMPT、RTMPS、RTMPE等多个协议。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

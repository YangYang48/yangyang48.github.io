<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>December on 欢迎来到我的博客~</title>
    <link>https://yangyang48.github.io/categories/december/</link>
    <description>Recent content in December on 欢迎来到我的博客~</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://yangyang48.github.io/categories/december/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java Thread</title>
      <link>https://yangyang48.github.io/2022/12/java-thread/</link>
      <pubDate>Thu, 22 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/12/java-thread/</guid>
      <description>&lt;p&gt;除了本身的并发编程，再聊聊Thread本身的特性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux clone</title>
      <link>https://yangyang48.github.io/2022/12/linux-clone/</link>
      <pubDate>Wed, 21 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/12/linux-clone/</guid>
      <description>&lt;p&gt;学习Linux中的clone函数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux dup and dup2</title>
      <link>https://yangyang48.github.io/2022/12/linux-dup-and-dup2/</link>
      <pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/12/linux-dup-and-dup2/</guid>
      <description>&lt;p&gt;学习Linux中的dup/dup2函数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android signal and crash</title>
      <link>https://yangyang48.github.io/2022/12/android-signal-and-crash/</link>
      <pubDate>Wed, 07 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/12/android-signal-and-crash/</guid>
      <description>&lt;p&gt;Android发生crash往往可以通过信号(signal)，那么我们怎么使用这个信号或者做处理呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一文带你了解ANR</title>
      <link>https://yangyang48.github.io/2022/12/%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3anr/</link>
      <pubDate>Tue, 06 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/12/%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3anr/</guid>
      <description>&lt;p&gt;Android中有时候会出现ANR，那么本文来描述，解开这个ANR神秘的面纱。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>am broadcast发送广播源码分析</title>
      <link>https://yangyang48.github.io/2022/12/am-broadcast%E5%8F%91%E9%80%81%E5%B9%BF%E6%92%AD%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 05 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/12/am-broadcast%E5%8F%91%E9%80%81%E5%B9%BF%E6%92%AD%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;Android中广播可以adb调试发送，am broadcast，本文主要分析这个广播源码。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>addr2line工具使用</title>
      <link>https://yangyang48.github.io/2022/12/addr2line%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 03 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2022/12/addr2line%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;Android中有一些常见的调试技巧，比如addr2line，用于将函数地址解析为函数名。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>并发编程3 阻塞队列和线程池</title>
      <link>https://yangyang48.github.io/2021/12/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B3-%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <pubDate>Sun, 19 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/12/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B3-%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <description>&lt;p&gt;在并发编程中，频繁的创建和销毁线程非常影响处理的效率，而且会使得线程抢占系统资源从而导致阻塞。这时候就需要线程池的帮助，线程池的创建离不开阻塞队列。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>并发编程2 CAS基本原理</title>
      <link>https://yangyang48.github.io/2021/12/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B2-cas%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/12/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B2-cas%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;p&gt;CAS(compare and Swap)是由硬件实现的。CAS可以将read- modify - write这类的操作转换为原子操作。jdk1.5之后引入CAS利用CPU原语保证线程操作的原子性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>并发编程1 java并发基础知识</title>
      <link>https://yangyang48.github.io/2021/12/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B1-java%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yangyang48.github.io/2021/12/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B1-java%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>&lt;p&gt;这块java并发基础知识主要是更全面的认识线程，了解线程，包括线程启动的二种方式、线程的生命周期、破坏死锁的四种方式和ThreadLocal。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
